var cookieName = 'FZ_COOKIECONSENT';
var openCssClass = 'open';
var closedCssClass = 'closed';
var openButtonCssClass = 'open-user';

function setCookie(cookieconsent, cookieName, cookieValue) {
    var date = new Date();
    var ttl = cookieconsent.dataset.cookiebarTtl ? parseInt(cookieconsent.dataset.cookiebarTtl, 10) : 365;

    // remove old items
    for(let i = 1; i <= 3; i++) { // all possible cookies
        if (window.localStorage.getItem(cookieName + '_' + i)) {
            window.localStorage.removeItem(cookieName + '_' + i);
        }
    }

    // Store in local storage
    date.setDate(date.getDate() + ttl);
    window.localStorage.setItem(cookieName + "_" + cookieValue, Math.round(date.getTime() / 1000));

    // Remove the active CSS class
    cookieconsent.classList.remove(openCssClass);
    cookieconsent.classList.remove(openButtonCssClass);

    // send changed event
    jQuery(document).trigger('user_privacy_changed', { level: cookieValue });
}



function run() {
    var cookieconsent = document.querySelector('.mod_cookieconsent');
    var maxValue = cookieconsent.dataset.cookiebarMaxValue ? parseInt(cookieconsent.dataset.cookiebarMaxValue) : 3;

    // Return if the cookiebar element does not exist
    if (!cookieconsent) {
        return;
    }

    var cookieSettingsButton = document.querySelectorAll('.cookieSettings, a[href="#cookieSettings"]');
    if(cookieSettingsButton) {
        cookieSettingsButton.forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                // Add the open CSS class
                cookieconsent.classList.add(openButtonCssClass);
            });
        });
    }

    var cookieSettingsForm = cookieconsent.querySelector('#cookie_settings');
    var acceptButton = cookieconsent.querySelector('.submit');
    var acceptAllButton = cookieconsent.querySelector('.acceptAll');
    var toggleSettingsButtons = cookieconsent.querySelectorAll('button.toggleSettings');

    if (acceptButton) {
        var radios = cookieconsent.querySelectorAll('input[name="privacy"]');
        let radio;
        // set radio button state
        for(let i = 1; i <= 3; i++) { // all possible cookies
            if (window.localStorage.getItem(cookieName + '_' + i) && window.localStorage.getItem(cookieName + '_' + i) > Math.round(Date.now() / 1000)) {
                radio = document.querySelector('#cookie_consent_' + i);
                if(radio) {
                    radio.checked = true;
                }
            }
        }

        acceptButton.addEventListener('click', function (e) {
            e.preventDefault();

            var cookieValue; // 1 - 3

            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    cookieValue = radios[i].value;
                    break;
                }
            }

            setCookie(cookieconsent, cookieName, cookieValue);
        });
    }

    if (acceptAllButton) {
        acceptAllButton.addEventListener('click', function (e) {
            e.preventDefault();
            setCookie(cookieconsent, cookieName, maxValue); // value 3 means accept all
        });
    }

    if(toggleSettingsButtons) {
        toggleSettingsButtons.forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();

                 // both classes needed for css animation
                if(cookieSettingsForm.classList.contains(openCssClass))
                    cookieSettingsForm.classList.add(closedCssClass);
                else
                    cookieSettingsForm.classList.remove(closedCssClass);

                cookieSettingsForm.classList.toggle(openCssClass);
            });
        });
    }

    for(let i = 1; i <= 3; i++) { // all possible cookies
        if (window.localStorage.getItem(cookieName + '_' + i) && window.localStorage.getItem(cookieName + '_' + i) > Math.round(Date.now() / 1000)) {
            return;
        }
    }

    // Add the open CSS class
    cookieconsent.classList.add(openCssClass);
}

var DOMReady = function(callback) {
  document.readyState === "interactive" || document.readyState === "complete" ? callback() : document.addEventListener("DOMContentLoaded", callback);
};
DOMReady(function() {
  run();
});